{"ast":null,"code":"/* global Masonry, imagesLoaded */\n\nexport function initMasonry(gridElement) {\n  if (!gridElement) return;\n  var masonry = new Masonry(gridElement, {\n    percentPosition: true,\n    columnWidth: '.grid-sizer',\n    itemSelector: '.grid-item',\n    gutter: '.gutter-sizer'\n  });\n\n  // 画像が読み込まれた後にレイアウトを更新\n  imagesLoaded(gridElement).progress(function () {\n    masonry.layout();\n  });\n  return masonry;\n}\n\n// Masonryミックスイン\nexport var masonryMixin = {\n  mounted: function mounted() {\n    var _this = this;\n    this.$nextTick(function () {\n      var grid = _this.$el.querySelector('.grid');\n      if (!grid) return;\n\n      // 画像の読み込みを待ってからMasonryを初期化\n      imagesLoaded(grid, function () {\n        new Masonry(grid, {\n          itemSelector: '.grid-item',\n          columnWidth: '.grid-sizer',\n          gutter: '.gutter-sizer',\n          percentPosition: true\n        });\n      });\n    });\n  },\n  // コンポーネントが更新されたときにレイアウトを再計算\n  updated: function updated() {\n    var _this2 = this;\n    this.$nextTick(function () {\n      var grid = _this2.$el.querySelector('.grid');\n      if (!grid) return;\n      var masonry = new Masonry(grid);\n      masonry.layout();\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.masonry) {\n      this.masonry.destroy();\n    }\n  }\n};","map":{"version":3,"names":["initMasonry","gridElement","masonry","Masonry","percentPosition","columnWidth","itemSelector","gutter","imagesLoaded","progress","layout","masonryMixin","mounted","_this","$nextTick","grid","$el","querySelector","updated","_this2","beforeDestroy","destroy"],"sources":["/Users/yusui/GitHub/Mono/site/src/assets/scripts/masonry.js"],"sourcesContent":["/* global Masonry, imagesLoaded */\n\nexport function initMasonry(gridElement) {\n  if (!gridElement) return;\n\n  const masonry = new Masonry(gridElement, {\n    percentPosition: true,\n    columnWidth: '.grid-sizer',\n    itemSelector: '.grid-item',\n    gutter: '.gutter-sizer'\n  });\n\n  // 画像が読み込まれた後にレイアウトを更新\n  imagesLoaded(gridElement).progress(() => {\n    masonry.layout();\n  });\n\n  return masonry;\n}\n\n// Masonryミックスイン\nexport const masonryMixin = {\n  mounted() {\n    this.$nextTick(() => {\n      const grid = this.$el.querySelector('.grid');\n      if (!grid) return;\n\n      // 画像の読み込みを待ってからMasonryを初期化\n      imagesLoaded(grid, () => {\n        new Masonry(grid, {\n          itemSelector: '.grid-item',\n          columnWidth: '.grid-sizer',\n          gutter: '.gutter-sizer',\n          percentPosition: true\n        });\n      });\n    });\n  },\n\n  // コンポーネントが更新されたときにレイアウトを再計算\n  updated() {\n    this.$nextTick(() => {\n      const grid = this.$el.querySelector('.grid');\n      if (!grid) return;\n\n      const masonry = new Masonry(grid);\n      masonry.layout();\n    });\n  },\n\n  beforeDestroy() {\n    if (this.masonry) {\n      this.masonry.destroy();\n    }\n  }\n};"],"mappings":"AAAA;;AAEA,OAAO,SAASA,WAAWA,CAACC,WAAW,EAAE;EACvC,IAAI,CAACA,WAAW,EAAE;EAElB,IAAMC,OAAO,GAAG,IAAIC,OAAO,CAACF,WAAW,EAAE;IACvCG,eAAe,EAAE,IAAI;IACrBC,WAAW,EAAE,aAAa;IAC1BC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACAC,YAAY,CAACP,WAAW,CAAC,CAACQ,QAAQ,CAAC,YAAM;IACvCP,OAAO,CAACQ,MAAM,CAAC,CAAC;EAClB,CAAC,CAAC;EAEF,OAAOR,OAAO;AAChB;;AAEA;AACA,OAAO,IAAMS,YAAY,GAAG;EAC1BC,OAAO,WAAPA,OAAOA,CAAA,EAAG;IAAA,IAAAC,KAAA;IACR,IAAI,CAACC,SAAS,CAAC,YAAM;MACnB,IAAMC,IAAI,GAAGF,KAAI,CAACG,GAAG,CAACC,aAAa,CAAC,OAAO,CAAC;MAC5C,IAAI,CAACF,IAAI,EAAE;;MAEX;MACAP,YAAY,CAACO,IAAI,EAAE,YAAM;QACvB,IAAIZ,OAAO,CAACY,IAAI,EAAE;UAChBT,YAAY,EAAE,YAAY;UAC1BD,WAAW,EAAE,aAAa;UAC1BE,MAAM,EAAE,eAAe;UACvBH,eAAe,EAAE;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED;EACAc,OAAO,WAAPA,OAAOA,CAAA,EAAG;IAAA,IAAAC,MAAA;IACR,IAAI,CAACL,SAAS,CAAC,YAAM;MACnB,IAAMC,IAAI,GAAGI,MAAI,CAACH,GAAG,CAACC,aAAa,CAAC,OAAO,CAAC;MAC5C,IAAI,CAACF,IAAI,EAAE;MAEX,IAAMb,OAAO,GAAG,IAAIC,OAAO,CAACY,IAAI,CAAC;MACjCb,OAAO,CAACQ,MAAM,CAAC,CAAC;IAClB,CAAC,CAAC;EACJ,CAAC;EAEDU,aAAa,WAAbA,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAAClB,OAAO,EAAE;MAChB,IAAI,CAACA,OAAO,CAACmB,OAAO,CAAC,CAAC;IACxB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}